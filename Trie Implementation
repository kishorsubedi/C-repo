#include <iostream>
#include <string>
using namespace std;

class node 
{
    public:
        node(char input)
        {
            isEnd = false;
            character = input;
        }
        char character;
        bool isEnd;
        node* children[26];
};

class trie
{
    public:
        node* rootptr;
        void insert(string word) //a
        {
            node* tempPtr = rootptr;
            for(int i = 0; i< word.length(); i++)
            {
                char k = word[i];
                int index = k - 'a';//25
                if(tempPtr->children[index] == NULL){
                    node* x = new node(k);
                    tempPtr->children[index] = x;
                }
                tempPtr = tempPtr->children[index];
            }
            tempPtr->isEnd = true;
        }
        
        void findAll()
        {
            node* temp = rootptr;
            helper(temp, "");
        }

        void helper(node* temp, string s)
        {
            if(temp == NULL)
                return;
            if(temp->isEnd == true)
                cout << s+temp->character << endl;
            for(int i=0; i< 26; i++)
            {
                helper(temp->children[i], s+temp->character);
            }
        }

        bool search(string word)//abc
        {
            node* temp = rootptr;
            int i = 0;
            while(i < word.length()){
                char k = word[i];
                int index = k - 'a';
                node* child = temp -> children[index];
                if(child == NULL){
                    return false;
                }
                if( i == word.length() - 1 && child->isEnd== false ){
                    return false;
                }
                if(k != child->character){
                     return false;
                }
                else 
                    temp = child;
                i += 1;
            }
            return true;
        }

        trie()
        {
            rootptr = new node(' ');
        }
};

int main()
{
    trie t = trie();
    t.insert("a");
    t.insert("abc");
   
    t.insert("kishor");
    t.insert("aki");
    t.findAll();
    return 0;
}
