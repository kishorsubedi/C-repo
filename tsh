
/* 
 * tsh - A tiny shell program with job control
 * <The line above is not a sufficient documentation.
 *  You will need to write your program documentation.>
 */

#include "tsh_helper.h"

/*
 * If DEBUG is defined, enable contracts and printing on dbg_printf.
 */
#ifdef DEBUG
/* When debugging is enabled, these form aliases to useful functions */
#define dbg_printf(...) printf(__VA_ARGS__)
#define dbg_requires(...) assert(__VA_ARGS__)
#define dbg_assert(...) assert(__VA_ARGS__)
#define dbg_ensures(...) assert(__VA_ARGS__)
#else
/* When debugging is disabled, no code gets generated for these */
#define dbg_printf(...)
#define dbg_requires(...)
#define dbg_assert(...)
#define dbg_ensures(...)
#endif

int childpid = -1;

/* Function prototypes */
void eval(const char *cmdline);

void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);
void sigquit_handler(int sig);

void sigkill_handler(int sig);

/*
 * <Write main's function header documentation. What does main do?>
 * "Each function should be prefaced with a comment describing the purpose
 *  of the function (in a sentence or two), the function's arguments and
 *  return value, any error cases that are relevant to the caller,
 *  any pertinent side effects, and any assumptions that the function makes."
 */
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE_TSH];  // Cmdline for fgets
    bool emit_prompt = true;    // Emit prompt (default)

    // Redirect stderr to stdout (so that driver will get all output
    // on the pipe connected to stdout)
    Dup2(STDOUT_FILENO, STDERR_FILENO);

    // Parse the command line
    while ((c = getopt(argc, argv, "hvp")) != EOF)
    {
        switch (c)
        {
        case 'h':                   // Prints help message
            usage();
            break;
        case 'v':                   // Emits additional diagnostic info
            verbose = true;
            break;
        case 'p':                   // Disables prompt printing
            emit_prompt = false;  
            break;
        default:
            usage();
        }
    }

    // Install the signal handlers
    signal(SIGINT,  sigint_handler);   // Handles ctrl-c
    Signal(SIGTSTP, sigtstp_handler);  // Handles ctrl-z
    signal(SIGCHLD, sigchld_handler);  // Handles terminated or stopped child
    signal(SIGKILL, sigkill_handler);
    
    Signal(SIGTTIN, SIG_IGN);
    Signal(SIGTTOU, SIG_IGN);

    Signal(SIGQUIT, sigquit_handler); 

    // Initialize the job list
    initjobs(job_list);

    // Execute the shell's read/eval loop
    while (true)
    {
        if (emit_prompt)
        {
            printf("%s", prompt);
            fflush(stdout);
        }

        if ((fgets(cmdline, MAXLINE_TSH, stdin) == NULL) && ferror(stdin))
        {
            app_error("fgets error");
        }

        if (feof(stdin))
        { 
            // End of file (ctrl-d)
            printf ("\n");
            fflush(stdout);
            fflush(stderr);
            return 0;
        }
        
        // Remove the trailing newline
        cmdline[strlen(cmdline)-1] = '\0';
        
        // Evaluate the command line
        eval(cmdline);
        fflush(stdout);
    } 
    
    return -1; // control never reaches here
}


/* Handy guide for eval:
 *
 * If the user has requested a built-in command (quit, jobs, bg or fg),
 * then execute it immediately. Otherwise, fork a child process and
 * run the job in the context of the child. If the job is running in
 * the foreground, wait for it to terminate and then return.
 * Note: each child process must have a unique process group ID so that our
 * background children don't receive SIGINT (SIGTSTP) from the kernel
 * when we type ctrl-c (ctrl-z) at the keyboard.
 */

/* 
 * <What does eval do?>
 */
void eval(const char *cmdline) 
{
    
    int status;
    //if builtin, run it 
    //else, run the executable in the child process 
    
    parseline_return parse_result;     
    struct cmdline_tokens token;
    
    //sigset_t ourmask;
    //Sigemptyset(&ourmask);

    // Parse command line
    parse_result = parseline(cmdline, &token);
    //printf("%s", token.argv[1]);
    //printf("%d", token.builtin)
    
    //printf("%s", token.text);
    
    //printf("%s %s %s", token.argv[0],token.argv[1], token.argv[2] );
    //
    //
    if (parse_result == PARSELINE_ERROR || parse_result == PARSELINE_EMPTY)
    {
        return;
    }
    
    switch(token.builtin) {

       case BUILTIN_NONE  :
            //this is an executable. run in foreground or background.
            if(parse_result == PARSELINE_FG){
                  ;
                  int fgprocessid = fork();
                   
                  if(fgprocessid == 0){//child process
                    //setpgid(0,0);
                    //Signal(SIGINT, SIG_DFL);
                    execve(token.argv[0], token.argv, environ);
                  }
                  else
                  { 
                      addjob(job_list, fgprocessid, FG, cmdline);
                      
                      childpid = fgprocessid;
                      waitpid(fgprocessid, &status, WUNTRACED); 
                      deletejob(job_list, fgprocessid);
                      
                      //printf("FG job ended");
                     //waitpid(fgprocessid, &status, WUNTRACED);  
                  }

              break;  
            }
            else{//parseline == PARSELINE_BG
                  
                  int bgprocessid = fork();

                  if(bgprocessid == 0){//child process
                    //setpgid(0,0);
                    //Signal(SIGINT, SIG_DFL);
                    execve(token.argv[0], token.argv, environ);
                      
                  }
                  else
                  {
                    addjob(job_list, bgprocessid, BG, cmdline);
                    int job_id = pid2jid(job_list, bgprocessid);
                      
                    //char * argumentt = token.argv[0] ;
                    printf("[%d] (%d) ", job_id, bgprocessid);
                    int i = 0;
                      while(i < token.argc){
                          printf("%s", token.argv[i]) ;
                          printf(" ");
                          i +=1 ;
                      }
                      printf("&\n");
                    //listjobs(job_list, STDOUT_FILENO);
                    //wait for this bg process to finish
                    
                  }
                
                break;
            }
            
       case BUILTIN_QUIT  ://quit has to not terminate bg job
          printf("Kishor QUIT THIS");
          raise(SIGKILL);
          break; /* optional */

       case BUILTIN_FG :
          printf("Kishor FG THIS");
          break; /* optional */

       case BUILTIN_BG :
          printf("Kishor BG THIS");
          break; /* optional */

       case BUILTIN_JOBS :
          //printf("Kishor THIS IS JOBS");
          listjobs(job_list, STDOUT_FILENO);
          break; /* optional */
    }
    
    //My code goes here.
    return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * <What does sigchld_handler do?>
 */
void sigchld_handler(int sig) 
{
    int status;
    int pid = waitpid(-1, &status, WUNTRACED);
    deletejob(job_list, pid);
}

/* 
 * <What does sigint_handler do?>
 */
void sigint_handler(int sig) 
{
    kill(childpid, SIGINT);
    printf("Job [1] (%d) terminated by signal %d\n", childpid, sig);
    return;
}

/*
 * <What does sigtstp_handler do?>
 */
void sigtstp_handler(int sig) 
{
    return;
}

void sigkill_handler(int sig)
{
    //printf("KIlled it ");
    return;
}
